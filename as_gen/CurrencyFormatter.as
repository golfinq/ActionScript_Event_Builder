// The initial version of this file was autogenerated from the official AS3 reference at
// https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/globalization/CurrencyFormatter.html
// by https://github.com/golfinq/ActionScript_Event_Builder
// It won't be regenerated in the future, so feel free to edit and/or fix

package flash.globalization
{
    
    
    public final class CurrencyFormatter
    {
        

        // The name of the requested locale ID that was passed to the constructor of this CurrencyFormatter object.
        private var _requestedLocaleIDName: String;
        
        // The name of the actual locale ID used by this CurrencyFormatter object.
        private var _actualLocaleIDName: String;
        
        // The three letter ISO 4217 currency code for the actual locale being used.
        private var _currencyISOCode: String;
        
        // The currency symbol or string for the actual locale being used.
        private var _currencySymbol: String;
        
        // The decimal separator character used for formatting or parsing currency amounts that have a decimal part.
        public var decimalSeparator: String;
        
        // Defines the set of digit characters used when formatting currency amounts.
        public var digitsType: uint;
        
        // The maximum number of digits that can appear after the decimal separator.
        public var fractionalDigits: int;
        
        // Describes the placement of grouping separators within the formatted currency amount string.
        public var groupingPattern: String;
        
        // The character or string used for the grouping separator.
        public var groupingSeparator: String;
        
        // The status of the most recent operation that this CurrencyFormatter object performed.
        private var _lastOperationStatus: String;
        
        // Specifies whether a leading zero is included in a formatted currency amount when there are no integer digits to the left of the decimal separator.
        public var leadingZero: Boolean;
        
        // A numeric value that indicates a formatting pattern for negative currency amounts.
        public var negativeCurrencyFormat: uint;
        
        // The negative symbol used when formatting negative currency amounts.
        public var negativeSymbol: String;
        
        // A numeric value that indicates a formatting pattern for positive currency amounts.
        public var positiveCurrencyFormat: uint;
        
        // Specifies whether trailing zeros are included in the formatted currency amount.
        public var trailingZeros: Boolean;
        
        // Enables the use of the grouping separator when formatting currency amounts.
        public var useGrouping: Boolean;
        

        
        public function CurrencyFormatter(requestedLocaleIDName:String)
        {
            this._requestedLocaleIDName = requestedLocaleIDName;
        }
        
        
        

        // Creates a string representing a currency amount formatted according to the current properties of this CurrencyFormatter object, including the locale, currency symbol, and currency ISO code.
        public function format(value:Number, withCurrencySymbol:Boolean = false):String
        {
            // Unknown Implementation
        }

        // Determines whether the currently specified currency symbol can be used when formatting currency amounts.
        public function formattingWithCurrencySymbolIsSafe(requestedISOCode:String):Boolean
        {
            // Unknown Implementation
        }

        // Lists all of the locale ID names supported by this class.
        public static function getAvailableLocaleIDNames():Vector.<String>
        {
            // Unknown Implementation
        }

        // Parses a string into a currency amount and a currency symbol.
        public function parse(inputString:String):CurrencyParseResult
        {
            // Unknown Implementation
        }

        // Sets the currencyISOCode and currencySymbol properties of the CurrencyFormatter object.
        public function setCurrency(currencyISOCode:String, currencySymbol:String):void
        {
            // Unknown Implementation
        }

        public function get requestedLocaleIDName() : String
        {
            return this._requestedLocaleIDName;
        }
        

        public function get actualLocaleIDName() : String
        {
            return this._actualLocaleIDName;
        }
        

        public function get currencyISOCode() : String
        {
            return this._currencyISOCode;
        }
        

        public function get currencySymbol() : String
        {
            return this._currencySymbol;
        }
        

        public function get lastOperationStatus() : String
        {
            return this._lastOperationStatus;
        }
        
    }
}